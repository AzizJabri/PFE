trigger:
  branches:
    include:
      - main
  paths:
    include:
      - client
  


stages:
- stage: CI
  jobs:
  - job: CI
    pool:
      vmImage: 'ubuntu-latest'
    variables:
    - group: ACRGroup
    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: 'azureDevOpsStage'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: 'az acr login --name $(acrDisplayName)'
      displayName: Azure CLI Login to ACR

    - checkout: self
    
    - task: SonarQubePrepare@5
      inputs:
        SonarQube: 'PfeSonar'
        scannerMode: 'Other'
        extraProperties: |
          # Additional properties that will be passed to the scanner,
          # Put one key=value per line, example:
          # sonar.exclusions=**/*.bin
          sonar.projectKey=PFE_DevOps_REPO_c81ae783-c67d-4dad-a7d6-f53abcc15189
          sonar.projectName=REPO
    - script: |
        FILTERED_PARAMS=$(echo $SONARQUBE_SCANNER_PARAMS | sed 's/"sonar.branch.name":"[^"]*"\,//g')
        echo "##vso[task.setvariable variable=SONARQUBE_SCANNER_PARAMS]$FILTERED_PARAMS"
      displayName: Filter out Branch Name
    
    - task: Npm@1
      inputs:
        command: 'custom'
        workingDir: 'client'
        customCommand: 'run build'
    
    - task: SonarQubeAnalyze@5
      inputs:
        jdkversion: 'JAVA_HOME_21_X64'

    - script: |
        # Build Docker image
        docker build -t react-client ./client
      displayName: Build Docker image

    - script: |
        # Tag Docker image
        docker tag react-client $(acr-name)/react-client:$(Build.BuildId)
      displayName: Tag Docker image

    - script: |
        # Push Docker image to Azure Container Registry
        docker push $(acr-name)/react-client:$(Build.BuildId)
      displayName: Push Docker image to ACR

- stage: CD
  jobs:
  - job: CD
    pool:
      vmImage: 'ubuntu-latest'
    variables:
      imageTag: '$(Build.BuildId)'
      acrName: '$(acr-name)' 
    steps:
    - checkout: self
    
    - task: KubectlInstaller@0
      inputs:
        kubectlVersion: 'latest'
    - task: replacetokens@6
      inputs:
        root: 'k8s'
        sources: '**/*.*'
        tokenPattern: 'azpipelines'
        missingVarLog: 'error'
    - task: Kubernetes@1
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: 'PFE AKS'
        command: 'apply'
        arguments: '-f ./k8s/client'
        secretType: 'dockerRegistry'
        containerRegistryType: 'Azure Container Registry'
