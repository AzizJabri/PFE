trigger:
  branches:
    include:
      - main
  paths:
    include:
      - server
  


stages:
- stage: Build
  jobs:
  - job: Build
    pool:
      vmImage: 'ubuntu-latest'
    steps:

    - checkout: self
  
    - task: SonarQubePrepare@5
      inputs:
        SonarQube: 'PfeSonar'
        scannerMode: 'Other'
        extraProperties: |
          # Additional properties that will be passed to the scanner,
          # Put one key=value per line, example:
          # sonar.exclusions=**/*.bin
          sonar.projectKey=PFE_DevOps_REPO_c81ae783-c67d-4dad-a7d6-f53abcc15189
          sonar.projectName=REPO
    - script: |
        FILTERED_PARAMS=$(echo $SONARQUBE_SCANNER_PARAMS | sed 's/"sonar.branch.name":"[^"]*"\,//g')
        echo "##vso[task.setvariable variable=SONARQUBE_SCANNER_PARAMS]$FILTERED_PARAMS"
      displayName: Filter out Branch Name
    - task: Maven@4
      inputs:
        mavenPomFile: 'server/pom.xml'
        options: '-DskipTests'
        publishJUnitResults: false
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '1.21'
        mavenVersionOption: 'Default'
        mavenAuthenticateFeed: false
        effectivePomSkip: false
        sonarQubeRunAnalysis: true
      displayName: Build Spring Boot App

    - task: CopyFiles@2
      inputs:
        SourceFolder: 'server/target'
        Contents: 'app.jar'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
      displayName: Copy app.jar to Artifacts Directory
         
    - task: CopyFiles@2
      inputs:
        SourceFolder: 'server'
        Contents: 'Dockerfile'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
      displayName: Copy Dockerfile to Artifacts Directory
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/app.jar'
        ArtifactName: 'drop'
        publishLocation: 'Container'
      displayName: Publish app.jar to Artifacts

- stage: Deliver
  jobs:
  - job: Deliver
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: 'azureDevOpsStage'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: 'az acr login --name $(acrDisplayName)'
      displayName: Azure CLI Login to ACR

    - checkout: self
    
    - task: DownloadBuildArtifacts@1
      inputs:
        buildType: 'current'
        downloadType: 'specific'
        itemPattern: 'drop/**'
        downloadPath: '$(System.ArtifactsDirectory)'
        cleanDestinationFolder: true
      displayName: Download app.jar from Artifacts
      
    - task: CopyFiles@2
      inputs:
        SourceFolder: 'server'
        Contents: 'Dockerfile'
        TargetFolder: '$(System.ArtifactsDirectory)'
      displayName: Copy Dockerfile to Artifacts Directory

    - script: |
        # Build Docker image
        docker build -t spring-server $(System.ArtifactsDirectory) --build-arg JAR_FILE=drop/app.jar
      displayName: Build Docker image

    - script: |
        # Tag Docker image
        docker tag spring-server $(acr-name)/spring-server:latest
      displayName: Tag Docker image

    - script: |
        # Push Docker image to Azure Container Registry
        docker push $(acr-name)/spring-server:latest
      displayName: Push Docker image to ACR

- stage: Deploy
  jobs:
  - job: Deploy
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
    
    - task: KubectlInstaller@0
      inputs:
        kubectlVersion: 'latest'
    
    - task: Kubernetes@1
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: 'PFE AKS'
        command: 'apply'
        arguments: '-f ./k8s'
        secretType: 'dockerRegistry'
        containerRegistryType: 'Azure Container Registry'
